import {
  $,
  N,
  S,
  j,
  ke,
  m,
  ne,
  p,
  u,
  v,
  x,
  y
} from "./chunk-7MQMNHLI.js";

// node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i2 = 0;
  while (i2 < str.length) {
    var char = str[i2];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i2++, value: str[i2++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i2, value: str[i2++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j2 = i2 + 1;
      while (j2 < str.length) {
        var code = str.charCodeAt(j2);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j2++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i2));
      tokens.push({ type: "NAME", index: i2, value: name });
      i2 = j2;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j2 = i2 + 1;
      if (str[j2] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j2));
      }
      while (j2 < str.length) {
        if (str[j2] === "\\") {
          pattern += str[j2++] + str[j2++];
          continue;
        }
        if (str[j2] === ")") {
          count--;
          if (count === 0) {
            j2++;
            break;
          }
        } else if (str[j2] === "(") {
          count++;
          if (str[j2 + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j2));
          }
        }
        pattern += str[j2++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i2));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i2));
      tokens.push({ type: "PATTERN", index: i2, value: pattern });
      i2 = j2;
      continue;
    }
    tokens.push({ type: "CHAR", index: i2, value: str[i2++] });
  }
  tokens.push({ type: "END", index: i2, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
  var defaultPattern = "[^".concat(escapeString(options.delimiter || "/#?"), "]+?");
  var result = [];
  var key = 0;
  var i2 = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i2 < tokens.length && tokens[i2].type === type)
      return tokens[i2++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i2], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i2 < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a = options.encode, encode = _a === void 0 ? function(x2) {
    return x2;
  } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
  var matches = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:".concat(token.pattern, ")$"), reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i2 = 0; i2 < tokens.length; i2++) {
      var token = tokens[i2];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "'.concat(token.name, '" to not repeat, but got an array'));
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "'.concat(token.name, '" to not be empty'));
        }
        for (var j2 = 0; j2 < value.length; j2++) {
          var segment = encode(value[j2], token);
          if (validate && !matches[i2].test(segment)) {
            throw new TypeError('Expected all "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode(String(value), token);
        if (validate && !matches[i2].test(segment)) {
          throw new TypeError('Expected "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "'.concat(token.name, '" to be ').concat(typeOfMessage));
    }
    return path;
  };
}
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode = _a === void 0 ? function(x2) {
    return x2;
  } : _a;
  return function(pathname) {
    var m3 = re.exec(pathname);
    if (!m3)
      return false;
    var path = m3[0], index = m3.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = function(i3) {
      if (m3[i3] === void 0)
        return "continue";
      var key = keys[i3 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m3[i3].split(key.prefix + key.suffix).map(function(value) {
          return decode(value, key);
        });
      } else {
        params[key.name] = decode(m3[i3], key);
      }
    };
    for (var i2 = 1; i2 < m3.length; i2++) {
      _loop_1(i2);
    }
    return { path, index, params };
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x2) {
    return x2;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode(token));
    } else {
      var prefix = escapeString(encode(token.prefix));
      var suffix = escapeString(encode(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            route += "((?:".concat(token.pattern, ")").concat(token.modifier, ")");
          } else {
            route += "(".concat(token.pattern, ")").concat(token.modifier);
          }
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// node_modules/atomic-router/dist/atomic-router.esm.js
function e(e2) {
  void 0 === e2 && (e2 = {});
  var r2 = y((e3) => {
    var r3 = e3.replace;
    return { params: e3.params || {}, query: e3.query || {}, replace: void 0 !== r3 && r3 };
  }, { name: "navigateFx", sid: "c2qlao" }), a2 = v({ and: { effect: r2, mapParams: (e3) => ({ params: e3 || {}, query: {} }) }, or: { name: "openFx", sid: "am04as" } }), n2 = p(false, { name: "$isOpened", sid: "-8u29di" }), t2 = p({}, { name: "$params", sid: "6sxdf" }), o2 = p({}, { name: "$query", sid: "tylje5" }), i2 = u({ name: "opened", sid: "fafqk0" }), s2 = u({ name: "updated", sid: "66vs1s" }), d2 = u({ name: "closed", sid: "-wbq1n3" });
  return n2.on(i2, () => true).on(d2, () => false), t2.on(i2, (e3, r3) => r3.params).on(s2, (e3, r3) => r3.params), o2.on(i2, (e3, r3) => r3.query).on(s2, (e3, r3) => r3.query), j({ and: [{ source: r2.doneData, match: n2.map((e3) => e3 ? "updated" : "opened"), cases: { opened: i2, updated: s2 } }], or: { sid: "3j56hf" } }), { $isOpened: n2, $params: t2, $query: o2, opened: i2, updated: s2, closed: d2, navigate: r2, open: a2, kind: F.ROUTE, settings: { derived: Boolean(e2.filter) } };
}
function r(e2, r2) {
  var a2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e2);
    r2 && (n2 = n2.filter((r3) => Object.getOwnPropertyDescriptor(e2, r3).enumerable)), a2.push.apply(a2, n2);
  }
  return a2;
}
function a(e2) {
  for (var a2 = 1; a2 < arguments.length; a2++) {
    var t2 = null != arguments[a2] ? arguments[a2] : {};
    a2 % 2 ? r(Object(t2), true).forEach((r2) => {
      n(e2, r2, t2[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : r(Object(t2)).forEach((r2) => {
      Object.defineProperty(e2, r2, Object.getOwnPropertyDescriptor(t2, r2));
    });
  }
  return e2;
}
function n(e2, r2, a2) {
  return r2 in e2 ? Object.defineProperty(e2, r2, { value: a2, enumerable: true, configurable: true, writable: true }) : e2[r2] = a2, e2;
}
function t(e2, r2) {
  (null == r2 || r2 > e2.length) && (r2 = e2.length);
  for (var a2 = 0, n2 = new Array(r2); a2 < r2; a2++)
    n2[a2] = e2[a2];
  return n2;
}
function o(e2, r2) {
  var it = "undefined" != typeof Symbol && e2[Symbol.iterator] || e2["@@iterator"];
  if (it)
    return (it = it.call(e2)).next.bind(it);
  if (Array.isArray(e2) || (it = ((e3, r3) => {
    if (e3) {
      if ("string" == typeof e3)
        return t(e3, r3);
      var a3 = {}.toString.call(e3).slice(8, -1);
      return "Object" === a3 && e3.constructor && (a3 = e3.constructor.name), "Map" === a3 || "Set" === a3 ? Array.from(e3) : "Arguments" === a3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a3) ? t(e3, r3) : void 0;
    }
  })(e2)) || r2 && e2 && "number" == typeof e2.length) {
    it && (e2 = it);
    var a2 = 0;
    return () => a2 >= e2.length ? { done: true } : { done: false, value: e2[a2++] };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function i(e2, r2) {
  if (Object.keys(e2).length !== Object.keys(r2).length)
    return false;
  for (var a2 in e2)
    if ("" + e2[a2] != "" + r2[a2])
      return false;
  return true;
}
function s(e2) {
  var r2, a2 = e2.params, n2 = e2.query, t2 = e2.serialize, o2 = compile(e2.pathCreator)(a2), i2 = null !== (r2 = null == t2 ? void 0 : t2.write(n2)) && void 0 !== r2 ? r2 : new URLSearchParams(n2);
  return o2 + (Object.keys(n2).length ? "?" + i2 : "");
}
function d(e2) {
  var r2 = e2.actualPath, a2 = match(e2.pathCreator.replace("://", "\\://"))(((e3) => {
    if (e3.match(/^[a-z0-9]+\:\/\//i))
      return e3;
    var r3 = new URL("http://_" + e3);
    return [r3.pathname, r3.hash].join("");
  })(r2));
  return a2 ? { matches: true, params: a2.params } : { matches: false };
}
function u2(e2) {
  if (!e2)
    throw new Error("[Routing] No history provided");
}
function c(e2) {
  return e2.map((e3) => !e3);
}
function l(e2) {
  var r2 = e2.base, n2 = e2.routes, t2 = e2.notFoundRoute, u3 = e2.hydrate, l2 = e2.serialize, p3 = e2.controls, m3 = void 0 === p3 ? ke({ sid: "d2qzob", fn: () => S2(), name: "controls", method: "createRouterControls" }) : p3, f2 = ((e3, r3) => {
    void 0 === r3 && (r3 = "");
    for (var n3, t3 = [], i2 = () => {
      var e4, r4 = n3.value;
      Array.isArray(r4.route) ? (e4 = t3).push.apply(e4, r4.route.map((e5) => a(a({}, r4), {}, { route: e5 }))) : t3.push(r4);
    }, s2 = o(e3); !(n3 = s2()).done; )
      i2();
    t3 = t3.map((e4) => a(a({}, e4), {}, { path: "" + r3 + e4.path }));
    for (var d2, u4 = [], c2 = [], l3 = o(t3); !(d2 = l3()).done; ) {
      var p4 = d2.value;
      p4.route.settings.derived ? u4.push(p4) : c2.push(p4);
    }
    if (u4.length)
      for (var m4, f3 = o(u4); !(m4 = f3()).done; )
        console.error("createHistoryRouter: " + m4.value.path + " uses derived route. This won't work");
    return c2;
  })(n2, r2), h2 = u({ name: "setHistory", sid: "9zwyxu" }), v2 = u({ name: "navigateFromRouteTriggered", sid: "soge6d" }), O = u({ name: "historyUpdated", sid: "-x4474u" }), w = u({ name: "recalculateTriggered", sid: "-ykrhlj" }), $2 = u({ name: "recalculated", sid: "aeh4sf" }), R = u({ name: "routesMatched", sid: "2rfqt6" }), x2 = u({ name: "routesMismatched", sid: "71hypl" }), P = u({ name: "routeNotFound", sid: "avqxzu" }), z = u({ name: "initialized", sid: "du6f0f" }), F2 = p("", { name: "$path", sid: "wz8cwv" }), C2 = p({}, { and: { name: "historyRouter.$query", updateFilter: (e3, r3) => !i(e3, r3) }, name: "$query", sid: "tkdilp" }), H = p([], { and: { serialize: "ignore" }, name: "$activeRoutes", sid: "9ljm7u" }), Q = p(null, { and: { serialize: "ignore" }, name: "$history", sid: "g4i7nj" }), I = p(false, { name: "$isFirstCheckPassed", sid: "9r108x" }), L = p(false, { name: "$isRouteNavigateInProgress", sid: "a1vtrl" }), N2 = v({ and: { source: Q, effect: (e3, r3) => E(a({ history: e3 }, r3)) }, or: { name: "pushFx", sid: "qm76ov" } }), B = v({ and: { source: Q, effect: (e3) => {
    var r3 = O;
    try {
      r3 = N(O);
    } catch (e4) {
    }
    return e3.listen(() => {
      r3();
    }), true;
  } }, or: { name: "subscribeHistoryFx", sid: "-b12mlt" } }), M = x({ and: [{ clock: u3 ? [O] : [O, B.done], source: Q, filter: Boolean, fn: (e3) => {
    var r3;
    return { path: e3.location.pathname, query: null !== (r3 = null == l2 ? void 0 : l2.read(e3.location.search)) && void 0 !== r3 ? r3 : Object.fromEntries(new URLSearchParams(e3.location.search)) };
  } }], or: { name: "historyUpdatedParsed", sid: "-rhkauu" } }), _ = x({ and: [{ clock: M, source: { path: F2, query: C2 }, filter: (e3, r3) => r3.path !== e3.path || !i(r3.query, e3.query), fn: (e3, r3) => r3 }], or: { name: "historyUpdateTriggered", sid: "-pbyg2j" } });
  Q.on(h2, (e3, r3) => r3), x({ and: [{ clock: Q, target: B }], or: { sid: "-pwl7u3" } }), x({ and: [{ clock: _, source: Q, filter: Boolean, fn: (e3) => {
    var r3, a2 = null == e3 ? void 0 : e3.location.hash;
    return { path: null == e3 ? void 0 : e3.location.pathname, query: null !== (r3 = null == l2 ? void 0 : l2.read(null == e3 ? void 0 : e3.location.search)) && void 0 !== r3 ? r3 : Object.fromEntries(new URLSearchParams(null == e3 ? void 0 : e3.location.search)), hash: a2 };
  }, target: w }], or: { sid: "-ptu8va" } });
  for (var G, J = o(f2); !(G = J()).done; ) {
    var K = G.value, V = R.filterMap(T(K)), W = x2.filterMap(T(K)), X = { opened: x({ and: [{ clock: V, filter: c(K.route.$isOpened) }], or: { name: "opened", sid: "-vfmdab" } }), updated: x({ and: [{ clock: V, filter: K.route.$isOpened }], or: { name: "updated", sid: "-2uhvx2" } }), closed: x({ and: [{ clock: W, filter: K.route.$isOpened }], or: { name: "closed", sid: "jc9588" } }) };
    x({ and: [{ clock: X.updated, source: [K.route.$params, K.route.$query], filter: (e3, r3) => {
      var a2 = e3[1];
      return !i(e3[0], r3.params) || !i(a2, r3.query);
    }, fn: (e3, r3) => r3, target: K.route.updated }], or: { sid: "-ny7ju5" } }), x({ and: [{ clock: X.opened, filter: c(L), target: K.route.opened }], or: { sid: "-ngm4ul" } }), x({ and: [{ clock: X.closed, target: K.route.closed }], or: { sid: "-d2q1d1" } });
  }
  for (var Y, Z = () => {
    var e3 = Y.value;
    x({ and: [{ clock: e3.route.navigate.doneData, fn: (r3) => {
      var a2 = r3.replace;
      return { route: e3, params: r3.params, query: r3.query, replace: null != a2 && a2 };
    }, target: v2 }], or: { sid: "-cm87k7" } });
  }, ee = o(f2); !(Y = ee()).done; )
    Z();
  L.on(v2, () => true), x({ and: [{ clock: v2, fn: (e3) => {
    var r3 = e3.params, a2 = e3.query, n3 = e3.replace;
    return { path: s({ pathCreator: e3.route.path, params: r3, query: a2, serialize: l2 }), params: r3, query: a2, method: n3 ? "replace" : "push" };
  }, target: N2 }], or: { sid: "-c2zeua" } }), L.reset([R, x2]), x({ and: [{ clock: w, fn: (e3) => {
    for (var r3, a2 = e3.path, n3 = e3.query, t3 = e3.hash, i2 = [], s2 = [], u4 = o(f2); !(r3 = u4()).done; ) {
      var c2 = r3.value, l3 = c2.path.includes("#") ? "" + a2 + t3 : "" + a2, p4 = d({ pathCreator: c2.path, actualPath: l3 });
      (p4.matches ? i2 : s2).push({ routeObj: c2, params: p4.params, query: n3 });
    }
    return s2.forEach((e4, r4) => {
      i2.some((r5) => r5.routeObj.route === e4.routeObj.route) && s2.splice(r4, 1);
    }), { matching: i2, mismatching: s2.filter(Boolean), path: a2, query: n3 };
  }, target: $2 }], or: { sid: "-ar5b7v" } }), F2.on(_, (e3, r3) => r3.path), C2.on(_, (e3, r3) => r3.query);
  var re = $2.map((e3) => e3.matching);
  return x({ and: [{ clock: re, filter: (e3) => e3.length > 0, target: R }], or: { sid: "1l4g7x" } }), x({ and: [{ clock: $2.map((e3) => e3.mismatching), filter: (e3) => e3.length > 0, target: x2 }], or: { sid: "1zyw8o" } }), H.on($2, (e3, r3) => r3.matching.map((e4) => e4.routeObj.route)), x({ and: [{ clock: re, filter: (e3) => 0 === e3.length, target: P }], or: { sid: "2hkb88" } }), ke({ sid: "2kv2vu", fn: () => U(t2), name: "none", method: "isRoute" }) && (x({ and: [{ clock: P, source: C2, filter: t2.$isOpened, fn: (e3) => ({ query: e3, params: {} }), target: t2.updated }], or: { sid: "2levfh" } }), x({ and: [{ clock: P, source: { query: C2, isOpened: t2.$isOpened }, filter: (e3) => !e3.isOpened, fn: (e3) => ({ query: e3.query, params: {} }), target: t2.opened }], or: { sid: "31cwmy" } }), x({ and: [{ clock: re, source: t2.$isOpened, filter: (e3, r3) => e3 && r3.length > 0, target: t2.closed }], or: { sid: "3haxuf" } })), x({ and: [{ clock: m3.back, source: Q, target: A }], or: { sid: "3xsrlj" } }), x({ and: [{ clock: m3.forward, source: Q, target: D }], or: { sid: "413j5p" } }), x({ and: [{ clock: C2, source: { controlsQuery: m3.$query, localQuery: C2 }, filter: (e3) => !i(e3.controlsQuery, e3.localQuery), fn: (e3) => e3.localQuery, target: m3.$query }], or: { sid: "4ghrrt" } }), x({ and: [{ clock: m3.$query, source: { path: F2, localQuery: C2, isNavigateInProgress: L, realHistory: Q }, filter: (e3, r3) => {
    var a2, n3, t3, o2 = e3.localQuery, s2 = e3.isNavigateInProgress, d2 = e3.realHistory, u4 = null !== (a2 = null == l2 ? void 0 : l2.read(null !== (n3 = null == d2 ? void 0 : d2.location.search) && void 0 !== n3 ? n3 : "")) && void 0 !== a2 ? a2 : Object.fromEntries(new URLSearchParams(null !== (t3 = null == d2 ? void 0 : d2.location.search) && void 0 !== t3 ? t3 : ""));
    return s2 || !i(r3, u4) || !i(o2, r3);
  }, fn: (e3, r3) => {
    var a2, n3 = e3.path, t3 = null !== (a2 = null == l2 ? void 0 : l2.write(r3)) && void 0 !== a2 ? a2 : new URLSearchParams(r3);
    return { path: n3 + (t3 ? "?" + t3 : ""), params: {}, query: r3, method: "push" };
  }, target: N2 }], or: { sid: "4wzlkn" } }), x({ and: [{ clock: $2, source: { activeRoutes: H, path: F2, query: C2 }, filter: I.map((e3) => !e3), target: z }], or: { sid: "gbpwte" } }), I.on(z, () => true).reset(Q), { $path: F2, $activeRoutes: H, $history: Q, setHistory: h2, $query: C2, back: m3.back, forward: m3.forward, push: N2, routes: f2, initialized: z, routeNotFound: P };
}
function p2(e2) {
  var r2 = e2.clock ? x({ and: [{ clock: e2.clock }], or: { name: "clock", sid: "-ek44ri" } }) : u({ name: "clock", sid: "-ejkc65" }), a2 = m2(e2.params || {}), n2 = m2(e2.query || {}), t2 = m2(e2.replace || false);
  return x({ and: [{ clock: r2, source: { params: a2, query: n2, replace: t2 }, fn: (e3, r3) => {
    var a3 = e3.params, n3 = e3.query, t3 = e3.replace;
    return { params: "function" == typeof a3 ? a3(r3) : a3, query: "function" == typeof n3 ? n3(r3) : n3, replace: "function" == typeof t3 ? t3(r3) : t3 };
  }, target: e2.route.navigate }], or: { sid: "ai8jf5" } }), r2;
}
function m2(e2) {
  return ne.store(e2, { sid: "b1hcct" }) ? e2 : p(e2, { sid: "-cvms36" });
}
function f(r2) {
  var a2 = ((r3) => {
    var a3 = {};
    if (ke({ sid: "-vuorye", fn: () => U(r3), name: "none", method: "isRoute" }))
      return Object.assign(a3, { route: r3, chainedRoute: ke({ sid: "-x3jlk0", fn: () => e(), name: "chainedRoute", method: "createRoute" }), beforeOpen: u({ name: "beforeOpen", sid: "2i9mdy" }), openOn: S([r3.opened, r3.closed], { name: "openOn", sid: "-n9uh0c" }), cancelOn: S([u({ name: "cancelOn", sid: "r6ceph" })], { name: "cancelOn", sid: "r6ce1d" }) }), a3;
    var n3 = r3;
    if (Object.assign(a3, { route: n3.route, chainedRoute: n3.chainedRoute || ke({ sid: "-if59ok", fn: () => e(), name: "chainedRoute", method: "createRoute" }), beforeOpen: ne.unit(n3.beforeOpen) ? n3.beforeOpen : v({ and: n3.beforeOpen, or: { name: "beforeOpen", sid: "-xdumjk" } }) }), ne.effect(a3.beforeOpen, { sid: "-qylloz" }))
      return Object.assign(a3, { openOn: n3.openOn || a3.beforeOpen.doneData, cancelOn: n3.cancelOn || a3.beforeOpen.failData }), a3;
    var t3 = r3;
    return Object.assign(a3, { openOn: x({ and: [{ clock: t3.openOn }], or: { name: "openOn", sid: "-92mmrn" } }), cancelOn: x({ and: [{ clock: t3.cancelOn || u({ name: "clock", sid: "-53qs2n" }) }], or: { name: "cancelOn", sid: "-m0jt12" } }) }), a3;
  })(r2), n2 = a2.route, t2 = a2.chainedRoute, o2 = a2.beforeOpen, i2 = a2.openOn, s2 = a2.cancelOn, d2 = p({}, { name: "$params", sid: "ahwukb" }), u3 = p({}, { name: "$query", sid: "-urele3" }), c2 = m({ and: [m({ and: [[n2.$params, n2.$query]], or: { name: "and", sid: "3v6jcf" } }), m({ and: [[d2, u3]], or: { name: "and", sid: "3vqbxs" } }), (e2, r3) => e2[0] === r3[0] && e2[1] === r3[1]], or: { name: "$hasSameParams", sid: "-xzy23v" } }), l2 = x({ and: [{ clock: [n2.opened, n2.updated] }], or: { name: "routeOpened", sid: "-gtwxmc" } });
  x({ and: [{ clock: l2, target: o2 }], or: { sid: "-noxmt5" } }), d2.on(l2, (e2, r3) => r3.params), u3.on(l2, (e2, r3) => r3.query);
  var p3 = $({ and: [{ clock: i2, source: { params: d2, query: u3 }, filter: c2 }], or: { name: "chainedRouteResolved", sid: "-mwemeb" } });
  x({ and: [{ clock: p3, target: t2.navigate }], or: { sid: "-n6sf88" } });
  var m3 = S([n2.closed, s2], { name: "aborted", sid: "utn0jm" });
  return d2.reset(m3), u3.reset(m3), x({ and: [{ clock: m3, target: t2.closed }], or: { sid: "-mqalfe" } }), t2;
}
function h(e2) {
  var r2, n2, t2, i2 = null !== (r2 = null === (n2 = e2.route) || void 0 === n2 ? void 0 : n2.$isOpened) && void 0 !== r2 ? r2 : p(true, { name: "$isOpened", sid: "-ubx3p" }), s2 = m({ and: [e2.source], or: { name: "$source", sid: "-3rrhte" } }), d2 = null !== (t2 = e2.clock) && void 0 !== t2 ? t2 : s2, u3 = "cleanup" in e2 ? "boolean" == typeof e2.cleanup ? C[e2.cleanup ? "all" : "none"] : a(a({}, C.default), e2.cleanup) : C.default, c2 = x({ and: [{ clock: e2.controls.$query, filter: i2 }], or: { name: "queryUpdatedFromHistory", sid: "8lf3wv" } });
  x({ and: [{ clock: d2, source: m({ and: [[s2, e2.controls.$query]], or: { name: "source", sid: "-3pgs50" } }), filter: i2, fn: (e3) => {
    var r3 = e3[0], n3 = e3[1], t3 = {};
    if (u3.irrelevant)
      for (var i3, s3 = o(u3.preserve); !(i3 = s3()).done; ) {
        var d3 = i3.value;
        d3 in n3 && (t3[d3] = n3[d3]);
      }
    else
      t3 = a({}, n3);
    for (var c3 in r3)
      t3[c3] = r3[c3];
    if (u3.empty)
      for (var l3 in r3)
        u3.preserve.includes(l3) || t3[l3] || delete t3[l3];
    return t3;
  }, target: e2.controls.$query }], or: { sid: "fuzb5g" } });
  var l2 = (r3) => {
    var a2 = e2.source[r3];
    a2.on(c2, (e3, n3) => {
      var t3;
      return null !== (t3 = n3[r3]) && void 0 !== t3 ? t3 : a2.defaultState;
    });
  };
  for (var p3 in e2.source)
    l2(p3);
}
var F = { ROUTE: Symbol() };
var S2 = () => ({ $query: p({}, { and: { updateFilter: (e2, r2) => !i(r2, e2) }, name: "$query", sid: "z22f3o" }), back: u({ name: "back", sid: "lqciue" }), forward: u({ name: "forward", sid: "-5dfdts" }) });
var U = (e2) => "object" == typeof e2 && null !== e2 && "kind" in e2 && e2.kind === F.ROUTE;
var E = y((e2) => (u2(e2.history), e2.history[e2.method](e2.path, {}), e2), { name: "historyPushFx", sid: "-w0no5y" });
var A = y((e2) => (u2(e2), e2.back(), e2), { name: "historyBackFx", sid: "-ny8vwp" });
var D = y((e2) => (u2(e2), e2.forward(), e2), { name: "historyForwardFx", sid: "88oqi4" });
var T = (e2) => (r2) => {
  var a2 = r2.find((r3) => r3.routeObj.route === e2.route);
  if (a2)
    return { params: a2.params, query: a2.query };
};
var C = { all: { irrelevant: true, empty: true, preserve: [] }, default: { irrelevant: false, empty: true, preserve: [] }, none: { irrelevant: false, empty: false, preserve: [] } };

export {
  e,
  s,
  d,
  l,
  p2 as p,
  f,
  h,
  F,
  S2 as S,
  U
};
//# sourceMappingURL=chunk-TNBCVAJY.js.map
