"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = delay;
var _effector = require("effector");
function delay({
  source,
  timeout,
  target = (0, _effector.createEvent)({
    name: "target",
    sid: "-z2vw3w"
  })
}) {
  if (!_effector.is.unit(source)) throw new TypeError('source must be a unit from effector');
  if (!_effector.is.unit(target)) throw new TypeError('target must be a unit from effector');
  const ms = validateTimeout(timeout);
  const timerFx = (0, _effector.createEffect)(({
    payload,
    milliseconds
  }) => new Promise(resolve => {
    setTimeout(resolve, milliseconds, payload);
  }), {
    name: "timerFx",
    sid: "-2uwk8k"
  });
  (0, _effector.sample)({
    and: [{
      // ms can be Store<number> | number
      // converts object of stores or object of values to store
      source: (0, _effector.combine)({
        and: [{
          milliseconds: ms
        }],
        or: {
          name: "source",
          sid: "c4jhin"
        }
      }),
      clock: source,
      fn: ({
        milliseconds
      }, payload) => ({
        payload,
        milliseconds: typeof milliseconds === 'function' ? milliseconds(payload) : milliseconds
      }),
      target: timerFx
    }],
    or: {
      sid: "-w88eue"
    }
  });

  // @ts-expect-error
  (0, _effector.forward)({
    and: {
      from: timerFx.doneData,
      to: target
    },
    or: {
      sid: "-vozm2r"
    }
  });
  return timerFx.doneData;
}
function validateTimeout(timeout) {
  if (_effector.is.store(timeout, {
    sid: "-v8hs87"
  }) || typeof timeout === 'function' || typeof timeout === 'number') {
    return timeout;
  }
  throw new TypeError(`'timeout' argument must be a function, Store, or a number. Passed "${typeof timeout}"`);
}