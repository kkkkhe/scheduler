import { createEvent, createStore, guard, sample, attach, is } from 'effector';
export function interval(_ref) {
  var {
    timeout,
    start,
    stop,
    leading = false,
    trailing = false
  } = _ref;
  var tick = createEvent({
    name: "tick",
    sid: "u782pl"
  });
  var $isRunning = createStore(false, {
    name: "$isRunning",
    sid: "-xegewf"
  });
  var $timeout = toStoreNumber(timeout);
  var $notRunning = $isRunning.map(running => !running);
  var saveTimeout = createEvent({
    name: "saveTimeout",
    sid: "ab3q7d"
  });
  var $timeoutId = createStore(null, {
    name: "$timeoutId",
    sid: "-aj5rja"
  }).on(saveTimeout, (_, _ref2) => {
    var {
      timeoutId
    } = _ref2;
    return timeoutId;
  });
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  var $rejecter = createStore(() => {}, {
    name: "$rejecter",
    sid: "opb0ih"
  }).on(saveTimeout, (_, _ref3) => {
    var {
      reject
    } = _ref3;
    return reject;
  });
  var timeoutFx = attach({
    and: {
      source: {
        timeout: $timeout,
        running: $isRunning
      },
      effect: _ref4 => {
        var {
          timeout,
          running
        } = _ref4;
        if (!running) {
          return Promise.reject();
        }
        return new Promise((resolve, reject) => {
          var timeoutId = setTimeout(resolve, timeout);
          saveTimeout({
            timeoutId,
            reject
          });
        });
      }
    },
    or: {
      name: "timeoutFx",
      sid: "9hil7b"
    }
  });
  var cleanupFx = attach({
    and: {
      source: {
        timeoutId: $timeoutId,
        rejecter: $rejecter
      },
      effect: _ref5 => {
        var {
          timeoutId,
          rejecter
        } = _ref5;
        rejecter();
        if (timeoutId) clearTimeout(timeoutId);
      }
    },
    or: {
      name: "cleanupFx",
      sid: "-v02m7d"
    }
  });
  guard({
    and: [{
      clock: start,
      source: $timeout,
      filter: $notRunning,
      target: timeoutFx
    }],
    or: {
      sid: "-vop0ii"
    }
  });
  if (leading) {
    var onReady = guard({
      and: [{
        clock: start,
        filter: $notRunning
      }],
      or: {
        name: "onReady",
        sid: "-cmw7lh"
      }
    });
    sample({
      and: [{
        clock: onReady,
        target: tick
      }],
      or: {
        sid: "-v876ny"
      }
    });
  }
  sample({
    and: [{
      clock: start,
      fn: () => true,
      target: $isRunning
    }],
    or: {
      sid: "-v6jsxl"
    }
  });
  guard({
    and: [{
      clock: timeoutFx.done,
      source: $timeout,
      filter: $isRunning,
      target: timeoutFx
    }],
    or: {
      sid: "-urpcwu"
    }
  });
  guard({
    and: [{
      clock: timeoutFx.done,
      filter: $isRunning,
      target: tick.prepend(() => {
        /* to be sure, nothing passed to tick */
      })
    }],
    or: {
      sid: "-ucb4aq"
    }
  });
  if (stop) {
    if (trailing) {
      sample({
        and: [{
          clock: stop,
          target: tick
        }],
        or: {
          sid: "6lcn0o"
        }
      });
    }
    $isRunning.on(stop, () => false);
    sample({
      and: [{
        clock: stop,
        target: cleanupFx
      }],
      or: {
        sid: "71ao6f"
      }
    });
  }
  return {
    tick,
    isRunning: $isRunning
  };
}
function toStoreNumber(value) {
  if (is.store(value, {
    sid: "7icamc"
  })) return value;
  if (typeof value === 'number') {
    return createStore(value, {
      and: {
        name: '$timeout'
      },
      sid: "knc3em"
    });
  }
  throw new TypeError("timeout parameter in interval method should be number or Store. \"".concat(typeof value, "\" was passed"));
}