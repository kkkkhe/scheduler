"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineEvents = combineEvents;
var _effector = require("effector");
function combineEvents({
  events,
  reset,
  target = (0, _effector.createEvent)({
    name: "target",
    sid: "aip3nf"
  })
}) {
  if (!_effector.is.unit(target)) throwError('target should be a unit');
  if (reset && !_effector.is.unit(reset)) throwError('reset should be a unit');
  (0, _effector.withRegion)(target, () => {
    const keys = Object.keys(events);
    const defaultShape = Array.isArray(events) ? [...keys].fill('') : {};
    const $counter = (0, _effector.createStore)(keys.length, {
      and: {
        serialize: 'ignore'
      },
      name: "$counter",
      sid: "-dby0v3"
    });
    const $results = (0, _effector.createStore)(defaultShape, {
      and: {
        serialize: 'ignore'
      },
      name: "$results",
      sid: "c60qbe"
    });
    $counter.reset((0, _effector.sample)({
      and: [{
        source: target
      }],
      or: {
        sid: "-8hxq8z"
      }
    }));
    $results.reset(target);
    if (reset) {
      $counter.reset((0, _effector.sample)({
        and: [{
          source: reset
        }],
        or: {
          sid: "3c6u5p"
        }
      }));
      $results.reset(reset);
    }
    for (const key of keys) {
      const $isDone = (0, _effector.createStore)(false, {
        and: {
          serialize: 'ignore'
        },
        name: "$isDone",
        sid: "uttu1j"
      }).on(events[key], () => true).reset(target);
      if (reset) {
        $isDone.reset(reset);
      }
      $counter.on($isDone, value => value - 1);
      $results.on(events[key], (shape, payload) => {
        const newShape = Array.isArray(shape) ? [...shape] : {
          ...shape
        };
        newShape[key] = payload;
        return newShape;
      });
    }
    (0, _effector.guard)({
      and: [{
        source: (0, _effector.sample)({
          and: [{
            source: $results,
            clock: (0, _effector.merge)(Object.values(events), {
              name: "clock",
              sid: "-531esq"
            })
          }],
          or: {
            name: "source",
            sid: "uwap9g"
          }
        }),
        filter: $counter.map(value => value === 0),
        target
      }],
      or: {
        sid: "ciyd7d"
      }
    });
  });
  return target;
}
function throwError(message) {
  throw new Error(message);
}