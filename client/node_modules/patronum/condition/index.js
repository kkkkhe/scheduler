import { createEvent, guard, is, split } from 'effector';
export function condition(_ref) {
  var {
    if: test,
    then: thenBranch,
    else: elseBranch,
    source = createEvent({
      name: "source",
      sid: "epke23"
    }, {
      name: "source",
      sid: "epke23"
    })
  } = _ref;
  var checker = is.unit(test) || isFunction(test) ? test : value => value === test;
  if (thenBranch && elseBranch) {
    split({
      and: [{
        source,
        match: {
          then: checker,
          else: inverse(checker)
        },
        cases: {
          then: thenBranch,
          else: elseBranch
        }
      }],
      or: {
        sid: "9tug3k"
      }
    });
  } else if (thenBranch) {
    guard({
      and: [{
        source,
        filter: checker,
        target: thenBranch
      }],
      or: {
        sid: "abznoh"
      }
    });
  } else if (elseBranch) {
    guard({
      and: [{
        source,
        filter: inverse(checker),
        target: elseBranch
      }],
      or: {
        sid: "-eb29qp"
      }
    });
  }
  return source;
}
function isFunction(value) {
  return typeof value === 'function';
}
function inverse(fnOrUnit) {
  if (is.unit(fnOrUnit)) {
    return fnOrUnit.map(value => !value);
  }
  return value => !fnOrUnit(value);
}