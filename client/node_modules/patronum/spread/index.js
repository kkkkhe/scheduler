import { createEvent, guard, sample } from 'effector';
var hasPropBase = {}.hasOwnProperty;
var hasOwnProp = (object, key) => hasPropBase.call(object, key);
/**
 * @example
 * spread({ source: dataObject, targets: { first: targetA, second: targetB } })
 * forward({
 *   to: spread({targets: { first: targetA, second: targetB } })
 * })
 */
export function spread(_ref) {
  var {
    targets,
    source = createEvent({
      name: "source",
      sid: "-fkbi3c"
    }, {
      name: "source",
      sid: "-fkbi3c"
    })
  } = _ref;
  var _loop = function _loop(targetKey) {
    if (hasOwnProp(targets, targetKey)) {
      var currentTarget = targets[targetKey];
      var hasTargetKey = guard({
        and: [{
          source,
          greedy: true,
          filter: object => typeof object === 'object' && object !== null && targetKey in object
        }],
        or: {
          name: "hasTargetKey",
          sid: "-cov4g4"
        }
      });
      sample({
        and: [{
          greedy: true,
          clock: hasTargetKey,
          fn: object => object[targetKey],
          target: currentTarget
        }],
        or: {
          sid: "lpn34j"
        }
      });
    }
  };
  for (var targetKey in targets) {
    _loop(targetKey);
  }
  return source;
}